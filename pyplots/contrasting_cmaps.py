import matplotlib.cm
import numpy as np  
from numpy import array 
import scipy.optimize 
from scipy.interpolate import CubicSpline 
import statistics


def brightness_diff(color1,color2):
    
    Red_value_1,Green_value_1,Blue_value_1 = color1[:3]
    Red_value_2,Green_value_2,Blue_value_2 = color2[:3]

    Red_value = Red_value_1-Red_value_2 
    Green_value = Green_value_1-Green_value_2 
    Blue_value = Blue_value_1-Blue_value_2 

    return abs(((Red_value * 299) + (Green_value * 587) + (Blue_value * 114)) / 1000)


def color_difference(color1, color2):

    Red_value_1,Green_value_1,Blue_value_1 = color1[:3]
    Red_value_2,Green_value_2,Blue_value_2 = color2[:3]

    return (max(Red_value_1, Red_value_2) - min(Red_value_1, Red_value_2)) + (max(Green_value_1, Green_value_2) - min(Green_value_1, Green_value_2)) + (max(Blue_value_1, Blue_value_2) - min(Blue_value_1, Blue_value_2))


min_bright_diff = 125/256 
min_color_diff = 500/256  

def pair_dismatch(color0,color): # the more negative, the better match 

    dbr = brightness_diff(color0, color)/min_bright_diff # > 1

    dcd = color_difference(color0, color)/min_color_diff # > 1 

    return - dbr*dbr - dcd*dcd   # as negative as possible  



def best_contrast(colors0, keep_const=[]):

    update_inds = np.array(sorted(list(set(range(3))-set(keep_const)))) 

    #print("Keeping constant:",", ".join(np.array(["red","green","blue"])[np.array(keep_const)]))

        
    update_inds_flat = [len(update_inds)*np.arange(len(colors0)) + k for k in range(len(update_inds))]

    colors1 = np.copy(colors0) 

    for j in range(3):
        for i in range(colors1.shape[0]):

            colors1[i,j] = 1-colors1[i,j]#> 0.5: 


    if len(update_inds)==0:

        return colors1 


    ch0 = np.max(np.abs(np.diff(colors0[:,:3],axis=0)))

    # max expected change of the colors 


    def get_colors(flat_colors):

        out = np.copy(colors1)

        for (K,k) in zip(update_inds, update_inds_flat):

            out[:,K] = flat_colors[k]

        return out 



    def loss_fct(flat_colors):

        out = 0.0 

        colors = get_colors(flat_colors)[:,:3]


#        ch = np.zeros(len(colors)-1)

        for i in range(len(colors)):

            out += pair_dismatch(colors[i], colors0[i])
        
        rough = np.diff(colors,axis=0) 

        out += np.mean(np.exp((rough/ch0)**2 - 1))

        return out 


    flat_colors = np.reshape(colors1[:,update_inds],-1)

    bounds = [[0,1] for q in flat_colors]

    result = scipy.optimize.minimize(loss_fct, flat_colors, bounds=bounds) 

    return get_colors(result.x)


def knots_contrasting_cmap(cmap):

    get_col = matplotlib.cm.get_cmap(cmap)

    diff = np.linalg.norm(np.diff(get_col(np.linspace(0,1,50))[:,:3],axis=0),axis=0)

    changes = np.argsort(diff+np.linspace(0,np.max(diff)/1000,len(diff))) 

# the channel changes[0] is almost inactive 
# the channel changes[-1] is the most active 

    #print(["red","green","blue"][changes[0]],"changes the least")
    #print(["red","green","blue"][changes[-1]],"changes the most")


    steps = np.linspace(0,1,20) 

    contrasting_colors = best_contrast(get_col(steps)[:,:3], keep_const=[changes[2]])


    min_diff = (steps[1]-steps[0])/100


    unique_colors = np.concatenate(([0],1+np.where(np.linalg.norm(np.diff(contrasting_colors,axis=0),axis=1)>min_diff)[0]))

    return (steps[unique_colors], contrasting_colors[unique_colors,:])


def good_color_boundary(c0):

    c0[c0>1] = 1
    c0[c0<0] = 0 

    return c0 


def get_contrasting_cmap(steps, contrasting_colors):

    if len(steps)==1:

        c0 = good_color_boundary(np.reshape(contrasting_colors,-1))

        return lambda q: c0 


    get_col2_ = CubicSpline(steps, contrasting_colors) 

    return lambda s: good_color_boundary(get_col2_(s))
        

#def print_knots(cmap,steps,colors):

#    print("\""+cmap+"\":")
#    print({cmap:(steps,colors)})


#===========================================================================#
#
# machine output 
#
#---------------------------------------------------------------------------#

precomputed_contrasting_knots_dict = {'cool': (array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.36842105, 0.42105263, 0.47368421,
       0.52631579, 0.57894737, 0.63157895, 0.68421053, 0.73684211,
       0.78947368, 0.84210526, 0.89473684, 0.94736842, 1.        ]), array([[0.        , 0.        , 0.        ],
       [0.        , 0.05098039, 0.        ],
       [0.        , 0.10196078, 0.        ],
       [0.        , 0.15686275, 0.        ],
       [0.        , 0.20784314, 0.        ],
       [0.        , 0.2627451 , 0.        ],
       [0.        , 0.31372549, 0.        ],
       [0.        , 0.36862745, 0.        ],
       [0.        , 0.41960784, 0.        ],
       [0.        , 0.4745098 , 0.        ],
       [0.        , 0.5254902 , 0.        ],
       [0.        , 0.58039216, 0.        ],
       [0.        , 0.63137255, 0.        ],
       [0.        , 0.68627451, 0.        ],
       [0.        , 0.7372549 , 0.        ],
       [0.        , 0.79215686, 0.        ],
       [0.        , 0.84313725, 0.        ],
       [0.        , 0.89803922, 0.        ],
       [0.        , 0.94901961, 0.        ],
       [0.        , 1.        , 0.        ]])), 'PuBuGn': (array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.36842105, 0.42105263, 0.47368421,
       0.52631579, 0.57894737, 0.63157895, 0.68421053, 0.73684211,
       0.78947368, 0.84210526, 0.89473684]), array([[0.        , 0.        , 0.        ],
       [0.03038831, 0.        , 0.        ],
       [0.06077662, 0.        , 0.        ],
       [0.10249904, 0.        , 0.        ],
       [0.14728181, 0.        , 0.        ],
       [0.20110727, 0.        , 0.        ],
       [0.26828143, 0.        , 0.        ],
       [0.34062284, 0.        , 0.        ],
       [0.4371857 , 0.        , 0.        ],
       [0.54569781, 0.1296857 , 0.0890344 ],
       [0.63526336, 0.31043578, 0.24322471],
       [0.71966167, 0.50155045, 0.41160239],
       [0.7986313 , 0.69437569, 0.58555836],
       [0.88819685, 0.87643747, 0.76207466],
       [0.97136486, 1.        , 0.92424319],
       [0.99347943, 1.        , 1.        ],
       [0.99507882, 1.        , 1.        ],
       [0.99607843, 1.        , 1.        ]])), 'YlGnBu': (array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.36842105, 0.42105263, 0.47368421,
       0.52631579, 0.57894737, 0.63157895, 0.68421053, 0.73684211,
       0.78947368, 0.84210526, 0.89473684, 0.94736842, 1.        ]), array([[0.        , 0.        , 0.        ],
       [0.02878893, 0.        , 0.        ],
       [0.05757785, 0.        , 0.        ],
       [0.10857363, 0.        , 0.        ],
       [0.16935025, 0.        , 0.        ],
       [0.24839677, 0.        , 0.        ],
       [0.36355248, 0.        , 0.        ],
       [0.48756632, 0.        , 0.        ],
       [0.58872741, 0.        , 0.        ],
       [0.69551711, 0.15360319, 0.        ],
       [0.77388697, 0.36287685, 0.0854695 ],
       [0.83589389, 0.58321898, 0.25876721],
       [0.88527489, 0.80378732, 0.44614688],
       [0.87666282, 1.        , 0.64060715],
       [0.8686659 , 1.        , 0.83835712],
       [0.86269896, 1.        , 1.        ],
       [0.85790081, 1.        , 1.        ],
       [0.87586313, 1.        , 1.        ],
       [0.92224529, 1.        , 1.        ],
       [0.96862745, 1.        , 1.        ]])), 'copper': (array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.36842105, 0.42105263, 0.47368421,
       0.52631579, 0.57894737, 0.63157895, 0.68421053, 0.73684211,
       0.78947368, 0.84210526]), array([[1.        , 1.        , 1.        ],
       [0.93702424, 1.        , 1.        ],
       [0.87404847, 1.        , 1.        ],
       [0.80622842, 1.        , 1.        ],
       [0.74325266, 1.        , 1.        ],
       [0.6754326 , 1.        , 1.        ],
       [0.61245684, 1.        , 1.        ],
       [0.54463679, 0.92705027, 1.        ],
       [0.48166102, 0.8187242 , 1.        ],
       [0.41384097, 0.70185084, 1.        ],
       [0.3508652 , 0.58083882, 1.        ],
       [0.28304515, 0.45778399, 1.        ],
       [0.22006939, 0.33407591, 1.        ],
       [0.15224933, 0.21340321, 1.        ],
       [0.08927357, 0.09887133, 1.        ],
       [0.02145352, 0.        , 1.        ],
       [0.        , 0.        , 1.        ]])), 'plasma': (array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.36842105, 0.42105263, 0.47368421,
       0.52631579, 0.57894737, 0.63157895, 0.68421053, 0.73684211,
       0.78947368, 0.84210526, 0.89473684, 0.94736842, 1.        ]), array([[0.949617  , 1.        , 1.        ],
       [0.828426  , 1.        , 1.        ],
       [0.738817  , 1.        , 1.        ],
       [0.64985   , 1.        , 1.        ],
       [0.570281  , 1.        , 1.        ],
       [0.487794  , 1.        , 1.        ],
       [0.415609  , 1.        , 1.        ],
       [0.34442   , 1.        , 1.        ],
       [0.285117  , 1.        , 1.        ],
       [0.228042  , 0.82508769, 1.        ],
       [0.180349  , 0.61929178, 1.        ],
       [0.133922  , 0.40500109, 1.        ],
       [0.095399  , 0.19017901, 1.        ],
       [0.059687  , 0.        , 1.        ],
       [0.033202  , 0.        , 1.        ],
       [0.013655  , 0.        , 1.        ],
       [0.005676  , 0.        , 1.        ],
       [0.010413  , 0.        , 1.        ],
       [0.029467  , 0.        , 1.        ],
       [0.059985  , 0.        , 1.        ]])), 'coolwarm': (array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.36842105, 0.42105263, 0.47368421,
       0.52631579, 0.57894737, 0.63157895, 0.68421053, 0.73684211,
       0.78947368, 0.84210526, 0.89473684, 0.94736842, 1.        ]), array([[1.        , 0.70128203, 0.        ],
       [0.94713448, 0.61316432, 0.        ],
       [0.63080157, 0.52793134, 0.        ],
       [0.29611043, 0.44094182, 0.        ],
       [0.        , 0.36697774, 0.        ],
       [0.        , 0.29589084, 0.        ],
       [0.        , 0.23924849, 0.        ],
       [0.        , 0.19114286, 0.        ],
       [0.        , 0.15907879, 0.        ],
       [0.        , 0.13883317, 0.        ],
       [0.        , 0.14802672, 0.        ],
       [0.        , 0.1877633 , 0.        ],
       [0.        , 0.23749898, 0.        ],
       [0.        , 0.30416994, 0.        ],
       [0.        , 0.37775291, 0.        ],
       [0.        , 0.4672505 , 0.26593015],
       [0.        , 0.5593082 , 0.5824076 ],
       [0.        , 0.66993187, 0.87848138],
       [0.        , 0.78969482, 1.        ],
       [0.        , 0.98444384, 1.        ]])), 'Spectral': (array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.36842105, 0.42105263, 0.47368421,
       0.52631579, 0.57894737, 0.63157895, 0.68421053, 0.73684211,
       0.78947368, 0.84210526, 0.89473684, 0.94736842, 1.        ]), array([[0.11351729, 0.99607843, 1.        ],
       [0.        , 0.87412534, 1.        ],
       [0.        , 0.75324875, 1.        ],
       [0.        , 0.6520569 , 0.87903654],
       [0.        , 0.55255671, 0.66248895],
       [0.        , 0.41261053, 0.42814011],
       [0.        , 0.29073433, 0.18760643],
       [0.        , 0.18308343, 0.        ],
       [0.        , 0.09773164, 0.        ],
       [0.        , 0.03098808, 0.        ],
       [0.        , 0.00999616, 0.        ],
       [0.        , 0.03152634, 0.        ],
       [0.        , 0.06874279, 0.        ],
       [0.        , 0.12041522, 0.        ],
       [0.        , 0.1727797 , 0.        ],
       [0.        , 0.23091119, 0.        ],
       [0.24120754, 0.3373318 , 0.        ],
       [0.50135304, 0.46220684, 0.        ],
       [0.75554328, 0.57623991, 0.        ],
       [0.99112323, 0.69019608, 0.        ]])), 'viridis': (array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.36842105, 0.42105263, 0.47368421,
       0.52631579, 0.57894737, 0.63157895, 0.68421053, 0.73684211,
       0.78947368, 0.84210526, 0.89473684, 0.94736842, 1.        ]), array([[0.732996  , 1.        , 1.        ],
       [0.719106  , 1.        , 1.        ],
       [0.71771   , 1.        , 1.        ],
       [0.729405  , 1.        , 1.        ],
       [0.749575  , 1.        , 1.        ],
       [0.776075  , 1.        , 1.        ],
       [0.80057   , 1.        , 1.        ],
       [0.824159  , 1.        , 1.        ],
       [0.84373   , 1.        , 1.        ],
       [0.863592  , 1.        , 1.        ],
       [0.878169  , 1.        , 1.        ],
       [0.87522   , 1.        , 1.        ],
       [0.837984  , 1.        , 1.        ],
       [0.760626  , 0.75379868, 1.        ],
       [0.664115  , 0.49011974, 1.        ],
       [0.541326  , 0.23204839, 1.        ],
       [0.414322  , 0.        , 1.        ],
       [0.269111  , 0.        , 1.        ],
       [0.133987  , 0.        , 1.        ],
       [0.006752  , 0.        , 1.        ]])), 'twilight': (array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.36842105, 0.42105263, 0.47368421,
       0.52631579, 0.57894737, 0.63157895, 0.68421053, 0.73684211,
       0.78947368, 0.84210526, 0.89473684, 0.94736842, 1.        ]), array([[0.        , 0.14999075, 0.        ],
       [0.        , 0.17754884, 0.        ],
       [0.        , 0.25668623, 0.        ],
       [0.        , 0.35102783, 0.        ],
       [0.28255848, 0.45505117, 0.23700633],
       [0.58485958, 0.56919141, 0.50721916],
       [0.87279411, 0.69307076, 0.78476782],
       [1.        , 0.81619607, 1.        ],
       [1.        , 0.91031775, 1.        ],
       [1.        , 0.93405961, 1.        ],
       [1.        , 0.93253421, 1.        ],
       [1.        , 0.91646757, 1.        ],
       [1.        , 0.87573646, 1.        ],
       [1.        , 0.80002979, 1.        ],
       [0.78187553, 0.69230502, 0.80036738],
       [0.49121243, 0.57005746, 0.53020758],
       [0.2073361 , 0.44024902, 0.24770106],
       [0.        , 0.31286966, 0.        ],
       [0.        , 0.20198037, 0.        ],
       [0.        , 0.14997814, 0.        ]])), 'hsv': (array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.42105263, 0.47368421, 0.52631579,
       0.57894737, 0.63157895, 0.68421053, 0.78947368, 0.84210526,
       0.89473684, 0.94736842]), array([[0.        , 1.        , 1.        ],
       [0.        , 0.69889676, 1.        ],
       [0.        , 0.39779352, 1.        ],
       [0.        , 0.07352849, 1.        ],
       [0.        , 0.        , 1.        ],
       [0.49485622, 0.        , 1.        ],
       [1.        , 0.        , 1.        ],
       [1.        , 0.        , 0.54991197],
       [1.        , 0.        , 0.        ],
       [1.        , 0.10367367, 0.        ],
       [1.        , 0.4279387 , 0.        ],
       [1.        , 0.72904194, 0.        ],
       [1.        , 1.        , 0.        ],
       [0.49357326, 1.        , 0.        ],
       [0.        , 1.        , 0.        ],
       [0.        , 1.        , 0.44415953],
       [0.        , 1.        , 1.        ]]))}


def contrasting_cmap(cmap):

    return get_contrasting_cmap(*precomputed_contrasting_knots_dict[cmap])


#===========================================================================#
#
#
#
#---------------------------------------------------------------------------#




if __name__ == '__main__': 


    quality = []

#    d = {} 

    for cmap_ in ["cool",
                "PuBuGn","YlGnBu","copper",
                "plasma","coolwarm","Spectral","viridis",
                "twilight","hsv"]:


        print("\ncmap:",cmap_)  

        knots = knots_contrasting_cmap(cmap_)

        get_col2_ = get_contrasting_cmap(*knots)

        get_col3_ = contrasting_cmap(cmap_)

        get_col_ = matplotlib.cm.get_cmap(cmap_)

        counter = 0 
    
        for s in np.linspace(0,1,200): 
    
            c = get_col_(s)  
            cc = get_col2_(s) 
#            ccc = get_col3_(s) 
   

            dbr = brightness_diff(c,cc)
            dcd = color_difference(c,cc) 
    
            counter += dbr>min_bright_diff
            counter += dcd>min_color_diff

        quality.append(counter/4)


        print("Quality:",np.round(quality[-1]),"%")

#        d[cmap_] = knots 
#        print_knots(cmap_,*knots)

#    print(d)
    #print(quality)
    #for f in [np.mean,np.min,np.max,statistics.variance]:

    #    print(np.round(f(quality),1))



